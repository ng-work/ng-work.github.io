{"meta":{"title":"lrzeblog","subtitle":null,"description":null,"author":"Mr. Lei","url":"http://yoursite.com"},"pages":[{"title":"关于","date":"2017-11-14T05:36:55.000Z","updated":"2017-11-14T05:43:45.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"hello,everybody"},{"title":"categories","date":"2017-11-16T15:41:43.000Z","updated":"2017-11-16T15:42:03.086Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-11-16T13:56:36.000Z","updated":"2017-11-16T15:42:05.034Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"vue-cli","slug":"vue","date":"2017-12-08T06:22:11.000Z","updated":"2017-12-09T16:51:15.480Z","comments":true,"path":"2017/12/08/vue/","link":"","permalink":"http://yoursite.com/2017/12/08/vue/","excerpt":"","text":"webpack-vue vue-cli官方脚手架安装安装官方脚手架(https://github.com/vuejs-templates/webpack) 12345678npm install -g vue-clivue init webpack my-projectcd my-projectnpm install 开发环境运行 1npm run dev 生产环境准备生成dist 1npm run build 官方脚手架支持单元测试 1npm run unit 这个模板是Vue 2.0兼容。对于Vue 1.x，请使用以下命令：1vue init webpack#1.0 my-project 官方脚手架中用到eslint，若不需要使用在项目初始化时执行到选择是否用eslint时输入N再回车若项目已经初始化完毕需要关闭找到/build/webpack.base.conf.js 在其中注释掉eslint Vue-cli proxyTable 解决开发环境的跨域问题在Vue-cli项目中webpack.dev.conf.js中devServer是这样的123456789101112131415161718devServer: &#123; clientLogLevel: 'warning', historyApiFallback: true, hot: true, compress: true, host: HOST || config.dev.host, port: PORT || config.dev.port, open: config.dev.autoOpenBrowser, overlay: config.dev.errorOverlay ? &#123; warnings: false, errors: true &#125; : false, publicPath: config.dev.assetsPublicPath, proxy: config.dev.proxyTable, quiet: true, // necessary for FriendlyErrorsPlugin watchOptions: &#123; poll: config.dev.poll, &#125;&#125; 其中proxy是设置代理的，这里的代理指向config/index.js中的proxyTable，所以说在Vue-cli官方脚手架项目中设置代理是在config/index.js中设置 在config/index.js中的dev是这样的 123456789101112131415161718192021222324252627282930313233343536373839404142dev: &#123; // Paths assetsSubDirectory: 'static', assetsPublicPath: '/', proxyTable: &#123;&#125;, // Various Dev Server settings host: 'localhost', // can be overwritten by process.env.HOST port: 8080, // can be overwritten by process.env.PORT, if port is in use, a free one will be determined autoOpenBrowser: false, errorOverlay: true, notifyOnErrors: true, poll: false, // https://webpack.js.org/configuration/dev-server/#devserver-watchoptions- // Use Eslint Loader? // If true, your code will be linted during bundling and // linting errors and warnings will be shown in the console. useEslint: true, // If true, eslint errors and warnings will also be shown in the error overlay // in the browser. showEslintErrorsInOverlay: false, /** * Source Maps */ // https://webpack.js.org/configuration/devtool/#development devtool: 'eval-source-map', // If you have problems debugging vue-files in devtools, // set this to false - it *may* help // https://vue-loader.vuejs.org/en/options.html#cachebusting cacheBusting: true, // CSS Sourcemaps off by default because relative paths are \"buggy\" // with this option, according to the CSS-Loader README // (https://github.com/webpack/css-loader#sourcemaps) // In our experience, they generally work as expected, // just be aware of this issue when enabling this option. cssSourceMap: false, &#125; 因为webpack.dev.conf.js中的proxy指向config/index.js中的proxyTable所以我们设置代理需要在proxyTable中设置12345678910 proxyTable: &#123; '/apis': &#123; //将www.exaple.com印射为/apis target: 'https://www.exaple.com', // 接口域名 changeOrigin: true, //是否跨域 pathRewrite: &#123; '^/apis': '' //需要rewrite的, &#125; &#125;&#125; vue-cli引入scss和lessvue-cli中已经内置配置好了sass 以及lass的配置。如果需要的话直接下载两个模块就可以了,webpack它会根据 lang 属性自动用适当的加载器去处理。 如果需要使用sass，则安装：12npm install node-sass --save-dev npm install sass-loader --save-dev sass的内联写法：123&lt;style lang=\"sass\" scoped&gt; //sass样式 &lt;/style&gt; sass的引用写法：1&lt;style lang=\"sass\" src=\"./index.sass\"&gt;&lt;/style&gt; 如果需要使用less，则安装：12npm install less --save-dev npm install less-loader --save-dev less的内联写法：123&lt;style lang=\"less\" scoped&gt; //less样式 &lt;/style&gt; less的引用写法：1&lt;style lang=\"less\" src=\"./index.less\"&gt;&lt;/style&gt;","categories":[{"name":"vue-cli","slug":"vue-cli","permalink":"http://yoursite.com/categories/vue-cli/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"webpack-react-typescript配置","slug":"webpack-react-typescript","date":"2017-11-16T11:26:33.000Z","updated":"2017-12-09T16:40:31.209Z","comments":true,"path":"2017/11/16/webpack-react-typescript/","link":"","permalink":"http://yoursite.com/2017/11/16/webpack-react-typescript/","excerpt":"webpack配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168const webpack = require('webpack');var CopyWebpackPlugin = require('copy-webpack-plugin');//不参与打包直接拷贝过去const &#123; resolve &#125; = require('path');const path = require('path');const glob = require('glob');const HtmlWebpackPlugin = require('html-webpack-plugin');var CompressionPlugin = require(\"compression-webpack-plugin\");//添加压缩文件const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");const PurifyCSSPlugin = require('purifycss-webpack');//从CSS中删除未使用的选择器const UglifyJSPlugin = require('uglifyjs-webpack-plugin');//压缩jsconst extractSass = new ExtractTextPlugin(&#123; //filename: \"[name].[contenthash].css\", filename: \"[name].css\", disable: false,&#125;);const paths = &#123; dist: resolve(__dirname, 'dist'), src: resolve(__dirname, 'src'),&#125;;module.exports = &#123; //entry: \"./src/index.tsx\", devtool: \"source-map\", entry: ['babel-polyfill','whatwg-fetch',__dirname + \"/src/index.tsx\",__dirname +\"/src/index.scss\"], output: &#123; filename: \"bundle.js\", path: paths.dist, publicPath: '/as/' &#125;, devServer : &#123; contentBase:paths.dist, hot: true, publicPath: '/as/', historyApiFallback: true, inline:true, host:\"0.0.0.0\", port:4455, //设置代理 proxy: &#123; '/@': &#123; target: 'http://*****', //target: 'http://*****', pathRewrite: &#123;'^/@' : ''&#125; &#125;, '/@': &#123; target: 'http://*****', //target: 'http://*****', &#125;, &#125; &#125;, resolve: &#123; extensions: ['.js', '.json', '.throwss','.ts', '.tsx','jsx'], modules: [ resolve(__dirname, '../node_modules'), \"node_modules\", ], &#125;, module: &#123; rules: [ &#123; test: /\\.json$/, loader: \"json-loader\" &#125;, &#123; test: /\\.tsx?$/, use: [ &#123;loader:'awesome-typescript-loader', options: &#123; useBabel:true &#125; &#125; ] &#125;, &#123; test: /\\.css$/, loader:'style-loader!css-loader?modules&amp;importLoaders=1&amp;localIdentName=[name]__[local]__[hash:base64:5]', &#125;, &#123; test: /\\.(sass|scss)$/, use: extractSass.extract(&#123; use: [&#123; loader: \"css-loader\", options: &#123; sourceMap: false &#125; &#125;,&#123; loader: \"sass-loader\", options: &#123; sourceMap: false &#125; &#125;], fallback: \"style-loader\" &#125;) &#125;, &#123; test: /\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/, loader: 'url-loader', options: &#123; limit: 10000 &#125; &#125;, ] &#125;, plugins: [ new webpack.LoaderOptionsPlugin(&#123; alias: &#123; 'react': 'React', 'react-dom': 'ReactDOM' &#125;&#125;), new webpack.HotModuleReplacementPlugin(), //生成index.html new HtmlWebpackPlugin( &#123; template: path.join(path.join(__dirname, 'src'), 'index.html'),template: __dirname + \"/src/index.html\" &#125; ), extractSass, new PurifyCSSPlugin(&#123; paths: glob.sync(path.join(__dirname, 'dist/*.js')), minimize:true, purifyOptions:&#123; minify:true &#125; &#125;), // new CompressionPlugin(&#123; // asset:\"[path].gz[query]\", // algorithm:\"gzip\", // test:/\\.js$|\\.css$|\\.html$/, // minRatio:0.6 // &#125;), new CopyWebpackPlugin([ &#123; from: 'src/favicon.ico' &#125; ]), // 生产环境启用开发环境启用影响webpack打包速度 // new UglifyJSPlugin(&#123; // uglifyOptions: &#123; // parallel:8, // ie8: true, // ecma: 5, // // parse: &#123;...options&#125;, // // mangle: &#123; // // ...options, // // properties: &#123; // // // mangle property options // // &#125; // // &#125;, // // output: &#123; // // comments: false, // // beautify: false, // // ...options // // &#125;, // // compress: &#123;...options&#125;, // warnings: false // &#125; // &#125;) ], &#125;;","text":"webpack配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168const webpack = require('webpack');var CopyWebpackPlugin = require('copy-webpack-plugin');//不参与打包直接拷贝过去const &#123; resolve &#125; = require('path');const path = require('path');const glob = require('glob');const HtmlWebpackPlugin = require('html-webpack-plugin');var CompressionPlugin = require(\"compression-webpack-plugin\");//添加压缩文件const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");const PurifyCSSPlugin = require('purifycss-webpack');//从CSS中删除未使用的选择器const UglifyJSPlugin = require('uglifyjs-webpack-plugin');//压缩jsconst extractSass = new ExtractTextPlugin(&#123; //filename: \"[name].[contenthash].css\", filename: \"[name].css\", disable: false,&#125;);const paths = &#123; dist: resolve(__dirname, 'dist'), src: resolve(__dirname, 'src'),&#125;;module.exports = &#123; //entry: \"./src/index.tsx\", devtool: \"source-map\", entry: ['babel-polyfill','whatwg-fetch',__dirname + \"/src/index.tsx\",__dirname +\"/src/index.scss\"], output: &#123; filename: \"bundle.js\", path: paths.dist, publicPath: '/as/' &#125;, devServer : &#123; contentBase:paths.dist, hot: true, publicPath: '/as/', historyApiFallback: true, inline:true, host:\"0.0.0.0\", port:4455, //设置代理 proxy: &#123; '/@': &#123; target: 'http://*****', //target: 'http://*****', pathRewrite: &#123;'^/@' : ''&#125; &#125;, '/@': &#123; target: 'http://*****', //target: 'http://*****', &#125;, &#125; &#125;, resolve: &#123; extensions: ['.js', '.json', '.throwss','.ts', '.tsx','jsx'], modules: [ resolve(__dirname, '../node_modules'), \"node_modules\", ], &#125;, module: &#123; rules: [ &#123; test: /\\.json$/, loader: \"json-loader\" &#125;, &#123; test: /\\.tsx?$/, use: [ &#123;loader:'awesome-typescript-loader', options: &#123; useBabel:true &#125; &#125; ] &#125;, &#123; test: /\\.css$/, loader:'style-loader!css-loader?modules&amp;importLoaders=1&amp;localIdentName=[name]__[local]__[hash:base64:5]', &#125;, &#123; test: /\\.(sass|scss)$/, use: extractSass.extract(&#123; use: [&#123; loader: \"css-loader\", options: &#123; sourceMap: false &#125; &#125;,&#123; loader: \"sass-loader\", options: &#123; sourceMap: false &#125; &#125;], fallback: \"style-loader\" &#125;) &#125;, &#123; test: /\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/, loader: 'url-loader', options: &#123; limit: 10000 &#125; &#125;, ] &#125;, plugins: [ new webpack.LoaderOptionsPlugin(&#123; alias: &#123; 'react': 'React', 'react-dom': 'ReactDOM' &#125;&#125;), new webpack.HotModuleReplacementPlugin(), //生成index.html new HtmlWebpackPlugin( &#123; template: path.join(path.join(__dirname, 'src'), 'index.html'),template: __dirname + \"/src/index.html\" &#125; ), extractSass, new PurifyCSSPlugin(&#123; paths: glob.sync(path.join(__dirname, 'dist/*.js')), minimize:true, purifyOptions:&#123; minify:true &#125; &#125;), // new CompressionPlugin(&#123; // asset:\"[path].gz[query]\", // algorithm:\"gzip\", // test:/\\.js$|\\.css$|\\.html$/, // minRatio:0.6 // &#125;), new CopyWebpackPlugin([ &#123; from: 'src/favicon.ico' &#125; ]), // 生产环境启用开发环境启用影响webpack打包速度 // new UglifyJSPlugin(&#123; // uglifyOptions: &#123; // parallel:8, // ie8: true, // ecma: 5, // // parse: &#123;...options&#125;, // // mangle: &#123; // // ...options, // // properties: &#123; // // // mangle property options // // &#125; // // &#125;, // // output: &#123; // // comments: false, // // beautify: false, // // ...options // // &#125;, // // compress: &#123;...options&#125;, // warnings: false // &#125; // &#125;) ], &#125;; tsconfig配置1234567891011121314151617181920212223&#123; \"compilerOptions\": &#123; \"allowSyntheticDefaultImports\":true,//typescript import 引入 \"outDir\": \"dist\", \"sourceMap\": true, \"noImplicitAny\": false, \"moduleResolution\": \"node\", \"module\": \"es2015\", \"target\": \"es5\", \"jsx\": \"preserve\", \"lib\": [ \"dom\", \"es2015\" ] &#125;, \"exclude\": [ \"dist\", \"node_modules\" ], \"awesomeTypescriptLoaderOptions\": &#123; \"useBabel\":true &#125;&#125; .babelrc配置1234567891011121314151617&#123; \"presets\": [ \"react\", [\"es2015\", &#123; \"modules\": false &#125;], \"stage-0\" ], \"plugins\": [ [\"transform-imports\", &#123; \"lodash\": &#123; \"transform\": \"lodash/$&#123;member&#125;\", \"preventFullImport\": true &#125; &#125;] ] &#125;","categories":[{"name":"webpack","slug":"webpack","permalink":"http://yoursite.com/categories/webpack/"}],"tags":[{"name":"webpack-ts","slug":"webpack-ts","permalink":"http://yoursite.com/tags/webpack-ts/"}]},{"title":"第一篇文章","slug":"hello-world","date":"2017-11-13T14:25:53.000Z","updated":"2017-11-16T11:25:26.747Z","comments":true,"path":"2017/11/13/hello-world/","link":"","permalink":"http://yoursite.com/2017/11/13/hello-world/","excerpt":"","text":"This is my first blog. I will do my every blog with my heart. Welcome to visit my blog. I’m glad that my article can help you. This is my GitHub and my blog.","categories":[],"tags":[]}]}